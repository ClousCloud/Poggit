extends ../layout

mixin compareMark(shaBase, shaHead)
	+ghMark(`github.com/${release.build.repoOwner}/${release.build.repoName}/compare/${shaBase}...${shaHead}`)

block seo_tail
	meta(property="article:published_time", content=lib.isoDate(publishDate))
	meta(property="article:modified_time", content=lib.isoDate(release.approveDate))
	meta(property="article:author", content=release.name)
	meta(property="article:section", content=lib.SECTION_RELEASE)
	meta(name="twitter:image:src", content = release.icon ? release.icon : "https://poggit.pmmp.io/res/defaultPluginIcon2.png")

block content
	.release-top
		if access.canEdit()
			.release-edit: span.action-red#edit-release Edit Release
		if access.canReview()
			#release-admin
				.action#release-mark-pending Pending...
				.action#release-mark-reject Reject...
				select.inline-select
					each stateName, stateId in PoggitConsts.Release.State
						if isNaN(stateName)
							option(value=stateId)= stateName
				if access.canAssign()
					.action#release-assign Assign
	.plugin-heading
		.plugin-title
			h3: nobr
				a(href=`/ci/${release.build.repoOwner}/${release.build.repoName}/${release.build.projectName}`)= release.name
				+ghMark(`github.com/${release.build.repoOwner}/${release.build.repoName}/tree/${release.build.sha}/${release.build.buildPath}`)
			h4 by #[a(href=`/plugins/by/${release.build.repoOwner}`)= release.build.repoOwner]
		.plugin-logo
			if release.icon
				img(src = release.icon, height = 64)
		.plugin-header-info: .plugin-info
			h5= release.shortDesc
			h6 Version: #{release.version}
			span#releaseState(class = "plugin-state-" + release.state)= PoggitConsts.Release.State[release.state]
	.plugin-top
		.plugin-top-left
			.download-release
				.release-download
					- var download_link = `/r/${release.artifact}/${release.name}_v${release.version}.phar`
					a.btn.btn-primary.btn-md.text-center(href=download_link, role="button")
						span.auto-download-button(data-target=download_link) Direct Download
					span.hover-title.btn-warning#open-install-instr How to install?
				.release-switch Versions
					select#release-version-history
						each prev in previousReleases
							option(value = prev.releaseId, selected = prev.releaseId === release.releaseId)
								| #{prev.version} (!{lib.date(prev.submitDate)}) #{PoggitConsts.Release.State[prev.state]}:
								|  &le;#{Object.keys(pmApis)[prev.spoons.map(s => Object.keys(pmApis).indexOf(s[1]))]}
			.release-highlights
				.highlight-item
					.highlight-left Downloads:
					.highlight-right #{release.versionDownloads} (this version), #{release.totalDownloads} (total)
				.highlight-item
					.highlight-left= lib.quantity(release.reviews.length, "review")
					.highlight-right.release-score: +reviewStars(release.reviews.length, lib.average(release.reviews.map(r => r.score)), true)
				.highlight-item.release-build-link#review-anchor
					.highlight-left Submitted on
					.highlight-right: .time(data-timestamp = release.submitDate.getTime())
				.highlight-item
					.highlight-left #{PoggitConsts.Release.State[release.state]} on
					.highlight-right: .time(data-timestamp = release.approveDate.getTime())
			.release-compare-link
				if lastVotedState !== null
					h6 Compare last public version #{lastVotedState.version}
						+compareMark(lastVotedState.sha, release.build.sha)
				if lastHigherState !== null
					h6 Compare last #{PoggitConsts.Release.State[lastHigherState.state]} version #{lastHigherState.version}
						+compareMark(lastHigherState.sha, release.build.sha)
	.plugin-table
		.plugin-prose
			.plugin-info-description
				.release-description-header
					.release-description Plugin Description
						+anchor("description")
					unless access.canWriteRepo()
						if release.state === PoggitConsts.Release.State.Checked
							#upvote(class = sessionData.session.isLoggedIn ? "upvotes vote-button" : "upvotes")
								img(src = "/res/voteup.png")
							#downvote(class = sessionData.session.isLoggedIn ? "downvotes vote-button" : "downvotes")
								img(src = "/res/votedown.png")
						each score in Array(5)
							.release-review-intent(data-score = score): img(src = "/res/Empty_Star.svg", height = 24)
				.plugin-info#rdesc(data-desc-type = release.description.type)
			if release.chlog !== null
				.plugin-info-changelog
					.form-key What's new
						+anchor("changelog")
					.plugin-info#rchlog(data-desc-type = release.chlog.type)
			if access.canWriteRepo() || true
				.plugin-info-shields
					.form-key Copy these to your README!
						+anchor("shield-template")
					.plugin-info
						each shield in ["state", "api", "dl", "dl.total"]
							.release-shield
								- let shieldLink = `https://poggit.pmmp.io/shield.${shield}/${release.name}`
								- let pluginLink = `https://poggit.pmmp.io/p/${release.name}`
								a(href = pluginLink): img(src = shieldLink)
								.shield-template
									.shield-template-type Markdown:
									pre: code= `[![](${shieldLink})](${pluginLink})`
								.shield-template
									.shield-template-type BB Code:
									pre: code= `[URL="${pluginLink}"][IMG]${shieldLink}[/IMG][/URL]`
								.shield-template
									.shield-template-type HTML:
									pre: code= `<a href="${pluginLink}"><img src="${shieldLink}"/></a>`
			.review-panel
				each review in reviews
					- let showRelease = false
					include ../thumbnail/review
		.plugin-meta-info
